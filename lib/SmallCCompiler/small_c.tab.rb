#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'pp'
require 'pry'
require_relative 'nodes'
require_relative 'small_c.rex'

def get_val(val)
	if val.is_a? Array
		val.flatten
	elsif val == nil
		SmallCCompiler::BrankNode.new
	elsif val.is_a? Hash and val.has_key? :value
		val[:value]
	else
		val
	end
end

def get_lineno(val)
	if val.is_a? SmallCCompiler::Node
		val.lineno
	elsif val.is_a? Array
		get_lineno(val[0])
	else
		val[:lineno]
	end
end

class MyParser < Racc::Parser

module_eval(<<'...end small_c.racc/module_eval...', 'small_c.racc', 368)
def get_tokens
  if ARGV[0]
    filename = ARGV[0]
  else
    print 'Enter filename: '
    filename = gets.strip
  end

  rex = Sample.new
  tokens = []

  begin
    rex.load_file filename
    while token = rex.next_token
      tokens << token
    end
    return tokens
  rescue e
    $stderr.puts e, e.backtrace
  end
end

def parse
  @tokens = get_tokens
  do_parse
end

def next_token
  t = @tokens.shift
end

...end small_c.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    47,    78,    68,    70,    78,    71,    24,    72,    97,   131,
    97,    50,    78,    51,    52,    53,    26,    97,    47,   127,
    68,    70,    26,    71,    22,    72,   109,    23,    66,    50,
    67,    51,    52,    53,    26,    98,    47,    98,    68,    70,
   103,    71,    22,    72,    98,    30,    66,    50,    67,    51,
    52,    53,    26,    78,    47,    78,    68,    70,    88,    71,
   128,    72,   129,    99,    66,    50,    67,    51,    52,    53,
    26,    88,    47,    84,    68,    70,    81,    71,    80,    72,
     7,     8,    66,    50,    67,    51,    52,    53,    26,    79,
    47,    76,    68,    70,    74,    71,    43,    72,    95,    96,
    66,    50,    67,    51,    52,    53,    26,    68,    70,    42,
    71,   132,    72,   133,    68,    70,    41,    71,    66,    72,
    67,    68,    70,    22,    71,    29,    72,    68,    70,    31,
    71,   138,    72,    66,   139,    67,    68,    70,    21,    71,
    66,    72,    67,    68,    70,    17,    71,    66,    72,    67,
   142,    68,    70,    66,    71,    67,    72,   130,    68,    70,
   nil,    71,    66,    72,    67,    68,    70,   nil,    71,    66,
    72,    67,   nil,    68,    70,   nil,    71,    66,    72,    67,
    68,    70,   nil,    71,    66,    72,    67,    68,    70,   nil,
    71,    66,    72,    67,   nil,    68,    70,   nil,    71,    66,
    72,    67,    68,    70,   nil,    71,    66,    72,    67,    68,
    70,   nil,    71,    66,    72,    67,   nil,    68,    70,   nil,
    71,    66,    72,    67,    68,    70,   nil,    71,    66,    72,
    67,    68,    70,   nil,    71,    66,    72,    67,   nil,    68,
    70,   nil,    71,    66,    72,    67,    68,    70,   nil,    71,
    66,    72,    67,    68,    70,   nil,    71,    66,    72,    67,
   nil,    68,    70,   nil,    71,    66,    72,    67,    68,    70,
   nil,    71,    66,    72,    67,    68,    70,   nil,    71,    66,
    72,    67,   nil,    68,    70,   nil,    71,    66,    72,    67,
    68,    70,   nil,    71,    66,    72,    67,    68,    70,   nil,
    71,    66,    72,    67,    91,    92,    93,    94,     9,    66,
   nil,    67,    91,    92,    93,    94,    66,   nil,    67,     7,
     8,     7,     8,    66,   nil,    67,    91,    92,    93,    94,
    77,    78,    28,    29,    46,    45,    95,    96,    95,    96,
     7,     8,     7,     8,     7,     8,    95,    96,    28,    29,
    89,    90,    95,    96,    18,    19,    14,    15,    89,    90,
    86,    87,     7,     8 ]

racc_action_check = [
   142,    83,   142,   142,   123,   142,    16,   142,   119,   123,
    63,   142,   104,   142,   142,   142,   142,   120,    56,   104,
    56,    56,    16,    56,    15,    56,    82,    15,   142,    56,
   142,    56,    56,    56,    56,   119,    37,    63,    37,    37,
    70,    37,    21,    37,   120,    21,    56,    37,    56,    37,
    37,    37,    37,   106,   138,   107,   138,   138,   111,   138,
   106,   138,   107,    65,    37,   138,    37,   138,   138,   138,
   138,    59,   129,    54,   129,   129,    52,   129,    51,   129,
    39,    39,   138,   129,   138,   129,   129,   129,   129,    50,
   128,    46,   128,   128,    40,   128,    34,   128,   118,   118,
   129,   128,   129,   128,   128,   128,   128,    96,    96,    32,
    96,   124,    96,   126,    95,    95,    31,    95,   128,    95,
   128,    94,    94,    29,    94,    28,    94,    93,    93,    22,
    93,   134,    93,    96,   136,    96,   133,   133,    14,   133,
    95,   133,    95,    92,    92,     9,    92,    94,    92,    94,
   141,    91,    91,    93,    91,    93,    91,   108,   130,   130,
   nil,   130,   133,   130,   133,    97,    97,   nil,    97,    92,
    97,    92,   nil,    90,    90,   nil,    90,    91,    90,    91,
   139,   139,   nil,   139,   130,   139,   130,    89,    89,   nil,
    89,    97,    89,    97,   nil,    88,    88,   nil,    88,    90,
    88,    90,    87,    87,   nil,    87,   139,    87,   139,    86,
    86,   nil,    86,    89,    86,    89,   nil,    98,    98,   nil,
    98,    88,    98,    88,    99,    99,   nil,    99,    87,    99,
    87,    81,    81,   nil,    81,    86,    81,    86,   nil,    80,
    80,   nil,    80,    98,    80,    98,    79,    79,   nil,    79,
    99,    79,    99,    78,    78,   nil,    78,    81,    78,    81,
   nil,    72,    72,   nil,    72,    80,    72,    80,    68,    68,
   nil,    68,    79,    68,    79,    67,    67,   nil,    67,    78,
    67,    78,   nil,    53,    53,   nil,    53,    72,    53,    72,
    66,    66,   nil,    66,    68,    66,    68,   103,   103,   nil,
   103,    67,   103,    67,    61,    61,    61,    61,     1,    53,
   nil,    53,   113,   113,   113,   113,    66,   nil,    66,     1,
     1,    43,    43,   103,   nil,   103,   114,   114,   114,   114,
    48,    48,    36,    36,    35,    35,   117,   117,   116,   116,
    30,    30,    26,    26,    23,    23,   115,   115,    19,    19,
   112,   112,    62,    62,    11,    11,     6,     6,    60,    60,
    58,    58,     0,     0 ]

racc_action_pointer = [
   351,   308,   nil,   nil,   nil,   nil,   352,   nil,   nil,   145,
   nil,   352,   nil,   nil,   133,    18,     4,   nil,   nil,   344,
   nil,    36,   122,   333,   nil,   nil,   331,   nil,   120,   117,
   329,   108,    99,   nil,    93,   330,   328,    34,   nil,    69,
    84,   nil,   nil,   310,   nil,   nil,    86,   nil,   328,   nil,
    80,    69,    67,   279,    54,   nil,    16,   nil,   340,    49,
   335,   279,   323,     6,   nil,    57,   286,   271,   264,   nil,
    31,   nil,   257,   nil,   nil,   nil,   nil,   nil,   249,   242,
   235,   227,    24,    -2,   nil,   nil,   205,   198,   191,   183,
   169,   147,   139,   123,   117,   110,   103,   161,   213,   220,
   nil,   nil,   nil,   293,     9,   nil,    50,    52,   155,   nil,
   nil,    36,   327,   287,   301,   317,   309,   307,    69,     4,
    13,   nil,   nil,     1,   101,   nil,   110,   nil,    88,    70,
   154,   nil,   nil,   132,   117,   nil,   132,   nil,    52,   176,
   nil,   140,    -2,   nil ]

racc_action_default = [
   -81,   -81,    -1,    -3,    -4,    -5,   -81,   -22,   -23,   -81,
    -2,   -81,    -7,    -9,   -81,   -11,   -81,   144,    -6,   -81,
   -10,   -11,   -81,   -76,   -13,   -16,   -78,    -8,   -81,   -11,
   -76,   -81,   -81,   -17,   -75,   -81,   -81,   -80,   -33,   -77,
   -81,   -12,   -14,   -81,   -19,   -20,   -81,   -24,   -81,   -26,
   -81,   -81,   -81,   -72,   -81,   -35,   -79,   -37,   -39,   -41,
   -43,   -45,   -48,   -53,   -56,   -59,   -81,   -81,   -81,   -63,
   -66,   -67,   -81,   -34,   -15,   -18,   -21,   -25,   -81,   -81,
   -81,   -72,   -81,   -71,   -32,   -36,   -81,   -81,   -81,   -81,
   -81,   -81,   -81,   -81,   -81,   -81,   -81,   -81,   -81,   -81,
   -60,   -61,   -62,   -74,   -81,   -38,   -81,   -81,   -81,   -31,
   -40,   -42,   -44,   -46,   -47,   -49,   -50,   -51,   -52,   -54,
   -55,   -57,   -58,   -81,   -81,   -69,   -73,   -68,   -81,   -81,
   -72,   -64,   -65,   -81,   -27,   -29,   -81,   -70,   -81,   -72,
   -28,   -81,   -81,   -30 ]

racc_goto_table = [
    55,    82,   105,    20,    83,    38,     1,     6,     6,    32,
   110,   100,   101,   102,   113,   114,    40,    20,    73,    85,
     2,    10,    37,   104,   119,   120,    54,   125,    39,   108,
   106,   107,    83,    36,   115,   116,   117,   118,    56,    44,
   111,   112,   121,   122,    75,    25,    36,    16,    27,   124,
   123,   126,   nil,   nil,   nil,   nil,   nil,   137,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   136,   nil,
   nil,    83,   nil,   nil,   nil,   nil,   nil,   141,   nil,   nil,
    83,   134,   135,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   140,   nil,   nil,   nil,   143 ]

racc_goto_check = [
    16,    18,    23,     9,    17,     3,     1,     6,     6,    11,
    23,    30,    30,    30,    27,    27,    11,     9,     3,    16,
     2,     2,    19,    17,    29,    29,    20,    23,    21,    18,
    17,    17,    17,     6,    28,    28,    28,    28,    22,    15,
    25,    26,    30,    30,    14,    12,     6,    10,     8,    33,
    17,    34,   nil,   nil,   nil,   nil,   nil,    23,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    18,   nil,
   nil,    17,   nil,   nil,   nil,   nil,   nil,    18,   nil,   nil,
    17,    16,    16,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    16,   nil,   nil,   nil,    16 ]

racc_goto_pointer = [
   nil,     6,    20,   -21,   nil,   nil,     7,   nil,    29,   -11,
    41,   -14,    29,   nil,     1,     4,   -37,   -49,   -52,    -4,
   -11,     2,     1,   -76,   nil,   -47,   -47,   -75,   -57,   -71,
   -55,   nil,   nil,   -54,   -52 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,    35,    11,    12,    13,
   nil,   nil,    49,    34,    33,   nil,   nil,    48,   nil,   nil,
   nil,   nil,   nil,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    69,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 34, :_reduce_1,
  2, 34, :_reduce_2,
  1, 35, :_reduce_3,
  1, 35, :_reduce_4,
  1, 35, :_reduce_none,
  3, 36, :_reduce_6,
  1, 40, :_reduce_7,
  3, 40, :_reduce_8,
  1, 41, :_reduce_9,
  2, 41, :_reduce_10,
  1, 42, :_reduce_11,
  4, 42, :_reduce_12,
  3, 37, :_reduce_13,
  4, 43, :_reduce_14,
  5, 43, :_reduce_15,
  3, 38, :_reduce_16,
  1, 46, :_reduce_17,
  3, 46, :_reduce_18,
  2, 47, :_reduce_19,
  1, 48, :_reduce_20,
  2, 48, :_reduce_21,
  1, 39, :_reduce_22,
  1, 39, :_reduce_23,
  1, 49, :_reduce_24,
  2, 49, :_reduce_25,
  1, 49, :_reduce_26,
  5, 49, :_reduce_27,
  7, 49, :_reduce_28,
  5, 49, :_reduce_29,
  9, 49, :_reduce_30,
  3, 49, :_reduce_31,
  4, 45, :_reduce_32,
  1, 54, :_reduce_33,
  2, 54, :_reduce_34,
  1, 55, :_reduce_35,
  2, 55, :_reduce_36,
  1, 50, :_reduce_37,
  3, 50, :_reduce_38,
  1, 56, :_reduce_39,
  3, 56, :_reduce_40,
  1, 57, :_reduce_41,
  3, 57, :_reduce_42,
  1, 58, :_reduce_43,
  3, 58, :_reduce_44,
  1, 59, :_reduce_45,
  3, 59, :_reduce_46,
  3, 59, :_reduce_47,
  1, 60, :_reduce_48,
  3, 60, :_reduce_49,
  3, 60, :_reduce_50,
  3, 60, :_reduce_51,
  3, 60, :_reduce_52,
  1, 61, :_reduce_53,
  3, 61, :_reduce_54,
  3, 61, :_reduce_55,
  1, 62, :_reduce_56,
  3, 62, :_reduce_57,
  3, 62, :_reduce_58,
  1, 63, :_reduce_59,
  2, 63, :_reduce_60,
  2, 63, :_reduce_61,
  2, 63, :_reduce_62,
  1, 64, :_reduce_63,
  4, 64, :_reduce_64,
  4, 64, :_reduce_65,
  1, 65, :_reduce_66,
  1, 65, :_reduce_67,
  3, 65, :_reduce_68,
  1, 67, :_reduce_69,
  3, 67, :_reduce_70,
  1, 51, :_reduce_71,
  0, 51, :_reduce_72,
  1, 66, :_reduce_73,
  0, 66, :_reduce_74,
  1, 44, :_reduce_75,
  0, 44, :_reduce_76,
  1, 52, :_reduce_77,
  0, 52, :_reduce_78,
  1, 53, :_reduce_79,
  0, 53, :_reduce_80 ]

racc_reduce_n = 81

racc_shift_n = 144

racc_token_table = {
  false => 0,
  :error => 1,
  ";" => 2,
  "," => 3,
  "*" => 4,
  :IDENTIFIER => 5,
  "[" => 6,
  :CONSTANT => 7,
  "]" => 8,
  "(" => 9,
  ")" => 10,
  :INT => 11,
  :VOID => 12,
  :IF => 13,
  :ELSE => 14,
  :WHILE => 15,
  :FOR => 16,
  :RETURN => 17,
  "{" => 18,
  "}" => 19,
  "=" => 20,
  "||" => 21,
  "&&" => 22,
  "==" => 23,
  "!=" => 24,
  "<" => 25,
  ">" => 26,
  "<=" => 27,
  ">=" => 28,
  "+" => 29,
  "-" => 30,
  "/" => 31,
  "&" => 32 }

racc_nt_base = 33

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\";\"",
  "\",\"",
  "\"*\"",
  "IDENTIFIER",
  "\"[\"",
  "CONSTANT",
  "\"]\"",
  "\"(\"",
  "\")\"",
  "INT",
  "VOID",
  "IF",
  "ELSE",
  "WHILE",
  "FOR",
  "RETURN",
  "\"{\"",
  "\"}\"",
  "\"=\"",
  "\"||\"",
  "\"&&\"",
  "\"==\"",
  "\"!=\"",
  "\"<\"",
  "\">\"",
  "\"<=\"",
  "\">=\"",
  "\"+\"",
  "\"-\"",
  "\"/\"",
  "\"&\"",
  "$start",
  "program",
  "external_declaration",
  "declaration",
  "function_prototype",
  "function_definition",
  "type_specifier",
  "declarator_list",
  "declarator",
  "direct_declarator",
  "function_declarator",
  "parameter_type_listopt",
  "compound_statement",
  "parameter_type_list",
  "parameter_declaration",
  "parameter_declarator",
  "statement",
  "expression",
  "expressionopt",
  "declaration_listopt",
  "statement_listopt",
  "declaration_list",
  "statement_list",
  "assign_expr",
  "logical_OR_expr",
  "logical_AND_expr",
  "equality_expr",
  "relational_expr",
  "add_expr",
  "mult_expr",
  "unary_expr",
  "postfix_expr",
  "primary_expr",
  "argument_expression_listopt",
  "argument_expression_list" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'small_c.racc', 3)
  def _reduce_1(val, _values, result)
     result = [get_val(val[0])].flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 4)
  def _reduce_2(val, _values, result)
     result = get_val(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 6)
  def _reduce_3(val, _values, result)
     result = get_val(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 7)
  def _reduce_4(val, _values, result)
     result = get_val(val[0]) 
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'small_c.racc', 11)
  def _reduce_6(val, _values, result)
    														result = SmallCCompiler::DeclarationNode.new({
															:lineno => get_lineno(val[2]),
															:type => get_val(val[0]), 
															:declarators => get_val(val[1])
														})
													
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 18)
  def _reduce_7(val, _values, result)
     result = [get_val(val[0])].flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 19)
  def _reduce_8(val, _values, result)
     result = [get_val(val[0]), get_val(val[2])].flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 22)
  def _reduce_9(val, _values, result)
    														args = get_val(val[0])
			 											args[:pointer] = false 
														result = SmallCCompiler::DeclaratorNode.new(args)
													
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 27)
  def _reduce_10(val, _values, result)
    														args = get_val(val[1])
														args[:pointer] = true
														result = SmallCCompiler::DeclaratorNode.new(args)
													
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 33)
  def _reduce_11(val, _values, result)
    													result = {
														:lineno => get_lineno(val[0]),
														:id => get_val(val[0]),
														:size => nil
													} 
												
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 40)
  def _reduce_12(val, _values, result)
    												 	result = { 
														:lineno => get_lineno(val[1]), 
														:id => get_val(val[0]), 
														:size => get_val(val[2]) 
													} 
											 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 48)
  def _reduce_13(val, _values, result)
    														args = get_val(val[1])
														args[:type] = get_val(val[0])
														result = SmallCCompiler::FunctionPrototypeNode.new(args)
													
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 54)
  def _reduce_14(val, _values, result)
    														result = { 
															:lineno => get_lineno(val[1]), 
															:id => get_val(val[0]), 
															:params => get_val(val[2]), 
															:pointer => false 
														} 
													
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 62)
  def _reduce_15(val, _values, result)
    													 	result = { 
															:lineno => get_lineno(val[0]), 
															:id => get_val(val[1]), 
															:params => get_val(val[3]), 
															:pointer => true 
														} 
												 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 72)
  def _reduce_16(val, _values, result)
    														args = get_val(val[1])
														args[:type] = get_val(val[0])
														args[:compound_statement] = get_val(val[2])
														result = SmallCCompiler::FunctionNode.new(args)
													
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 78)
  def _reduce_17(val, _values, result)
     result = [get_val(val[0])].flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 79)
  def _reduce_18(val, _values, result)
     result = [get_val(val[0]), get_val(val[2])].flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 82)
  def _reduce_19(val, _values, result)
    															args = get_val(val[1])
															args[:type] = get_val(val[0])
															result = SmallCCompiler::ParameterNode.new(args)
														
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 88)
  def _reduce_20(val, _values, result)
    															result = { 
																:lineno => get_lineno(val[0]), 
																:pointer => false, 
																:parameter => get_val(val[0]) 
															} 
													
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 95)
  def _reduce_21(val, _values, result)
    															result = { 
																:lineno => get_lineno(val[0]), 
																:pointer => true, 
																:parameter => get_val(val[1]) 
															}
													
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 102)
  def _reduce_22(val, _values, result)
     result = get_val(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 103)
  def _reduce_23(val, _values, result)
     result = get_val(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 105)
  def _reduce_24(val, _values, result)
     result = SmallCCompiler::StatementNode.new({ :lineno => get_lineno(val[0]), :value => SmallCCompiler::BrankNode.new }) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 106)
  def _reduce_25(val, _values, result)
     result = SmallCCompiler::StatementNode.new({ :lineno => get_lineno(val[1]), :value => get_val(val[0]) }) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 107)
  def _reduce_26(val, _values, result)
     result = SmallCCompiler::StatementNode.new({ :lineno => get_lineno(val[0]), :value => get_val(val[0]) }) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 109)
  def _reduce_27(val, _values, result)
    									result = SmallCCompiler::IfNode.new({ 
										:lineno => get_lineno(val[0]), 
										:condition => get_val(val[2]), 
										:then => get_val(val[4]), 
										:else => SmallCCompiler::BrankNode.new 
									}) 
							
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 117)
  def _reduce_28(val, _values, result)
    									result = SmallCCompiler::IfNode.new({ 
										:lineno => get_lineno(val[0]), 
										:condition => get_val(val[2]), 
										:then => get_val(val[4]), 
										:else => get_val(val[6]) 
									}) 
							
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 125)
  def _reduce_29(val, _values, result)
    									result = SmallCCompiler::WhileNode.new({ 
										:lineno => get_lineno(val[0]), 
										:condition => get_val(val[2]), 
										:statement => get_val(val[4]) 
									}) 
							
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 132)
  def _reduce_30(val, _values, result)
    									result = SmallCCompiler::ForNode.new({ 
										:lineno => get_lineno(val[0]), 
										:initial => get_val(val[2]), 
										:condition => get_val(val[4]), 
										:next => get_val(val[6]), 
										:statement => get_val(val[8]) 
									}) 
							
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 140)
  def _reduce_31(val, _values, result)
     result = SmallCCompiler::ReturnNode.new({ :lineno => get_lineno(val[0]), :expression => get_val(val[1]) }) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 143)
  def _reduce_32(val, _values, result)
    													result = SmallCCompiler::CompoundStatementNode.new({ 
														:lineno => get_lineno(val[0]), 
														:declarations => get_val(val[1]), 
														:statements => get_val(val[2]) 
													}) 
												
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 150)
  def _reduce_33(val, _values, result)
     result = [get_val(val[0])].flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 151)
  def _reduce_34(val, _values, result)
     result = get_val(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 153)
  def _reduce_35(val, _values, result)
     result = [get_val(val[0])].flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 154)
  def _reduce_36(val, _values, result)
     result = get_val(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 156)
  def _reduce_37(val, _values, result)
     result = SmallCCompiler::ExpressionNode.new( { :lineno => get_lineno(val[0]), :values => get_val(val) } )
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 157)
  def _reduce_38(val, _values, result)
     result = SmallCCompiler::ExpressionNode.new( { :lineno => get_lineno(val[1]), :values => [get_val(val[0]), get_val(val[2])].flatten }) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 159)
  def _reduce_39(val, _values, result)
     result = get_val(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 161)
  def _reduce_40(val, _values, result)
    											 	result = SmallCCompiler::AssignNode.new({ 
													:lineno => get_lineno(val[1]), 
													:left => get_val(val[0]), 
													:right => get_val(val[2]) 
												}) 
										 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 168)
  def _reduce_41(val, _values, result)
     result = get_val(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 170)
  def _reduce_42(val, _values, result)
    															 result = SmallCCompiler::LogicNode.new({ 
															 	:lineno => get_lineno(val[1]), 
																:left => get_val(val[0]), 
																:symbol => get_val(val[1]), 
																:right => get_val(val[2]) 
															 }) 
													 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 178)
  def _reduce_43(val, _values, result)
     result = get_val(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 180)
  def _reduce_44(val, _values, result)
    															result = SmallCCompiler::LogicNode.new({ 
																:lineno => get_lineno(val[1]), 
																:left => get_val(val[0]), 
																:symbol => get_val(val[1]), 
																:right => get_val(val[2]) 
															}) 
													
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 188)
  def _reduce_45(val, _values, result)
     result = get_val(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 190)
  def _reduce_46(val, _values, result)
    												 result = SmallCCompiler::EqualityNode.new({ 
													 :lineno => get_lineno(val[1]), 
													 :left => get_val(val[0]), 
													 :symbol => get_val(val[1]), 
													 :right => get_val(val[2]) 
												 }) 
										 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 198)
  def _reduce_47(val, _values, result)
    												 result = SmallCCompiler::EqualityNode.new({ 
													 :lineno => get_lineno(val[1]), 
													 :left => get_val(val[0]), 
													 :symbol => get_val(val[1]), 
													 :right => get_val(val[2]) 
												 }) 
										 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 206)
  def _reduce_48(val, _values, result)
     result = get_val(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 208)
  def _reduce_49(val, _values, result)
    													 result = SmallCCompiler::RelationNode.new({ 
														 :lineno => get_lineno(val[1]), 
														 :left => get_val(val[0]), 
														 :symbol => get_val(val[1]), 
														 :right => get_val(val[2]) 
													 }) 
											 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 216)
  def _reduce_50(val, _values, result)
    													 result = SmallCCompiler::RelationNode.new({ 
														 :lineno => get_lineno(val[1]), 
														 :left => get_val(val[0]), 
														 :symbol => get_val(val[1]), 
														 :right => get_val(val[2]) 
													 }) 
											 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 224)
  def _reduce_51(val, _values, result)
    													 result = SmallCCompiler::RelationNode.new({ 
														 :lineno => get_lineno(val[1]), 
														 :left => get_val(val[0]), 
														 :symbol => get_val(val[1]), 
														 :right => get_val(val[2]) 
													 }) 
											 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 232)
  def _reduce_52(val, _values, result)
    													 result = SmallCCompiler::RelationNode.new({ 
														 :lineno => get_lineno(val[1]), 
														 :left => get_val(val[0]), 
														 :symbol => get_val(val[1]), 
														 :right => get_val(val[2]) 
													 }) 
											 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 240)
  def _reduce_53(val, _values, result)
     result = get_val(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 242)
  def _reduce_54(val, _values, result)
    											result = SmallCCompiler::ArithmeticNode.new({ 
												:lineno => get_lineno(val[1]), 
												:left => get_val(val[0]), 
												:symbol => get_val(val[1]), 
												:right => get_val(val[2])
											}) 
									
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 250)
  def _reduce_55(val, _values, result)
    											result = SmallCCompiler::ArithmeticNode.new({ 
												:lineno => get_lineno(val[1]), 
												:left => get_val(val[0]), 
												:symbol => get_val(val[1]), 
												:right => get_val(val[2]) 
											}) 
									
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 258)
  def _reduce_56(val, _values, result)
     result = get_val(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 260)
  def _reduce_57(val, _values, result)
    									 result = SmallCCompiler::ArithmeticNode.new({ 
										 :lineno => get_lineno(val[1]), 
										 :left => get_val(val[0]),
										 :symbol => get_val(val[1]), 
										 :right => get_val(val[2]) 
									 }) 
							 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 268)
  def _reduce_58(val, _values, result)
    									 result = SmallCCompiler::ArithmeticNode.new({ 
										 :lineno => get_lineno(val[1]), 
										 :left => get_val(val[0]),
										 :symbol => get_val(val[1]), 
										 :right => get_val(val[2]) 
									 }) 
							 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 275)
  def _reduce_59(val, _values, result)
     result = get_val(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 277)
  def _reduce_60(val, _values, result)
    										result = SmallCCompiler::UnaryExpressionNode.new({ 
											:lineno => get_lineno(val[0]), 
											:symbol => get_val(val[0]), 
											:value => get_val(val[1]) 
										}) 
								
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 284)
  def _reduce_61(val, _values, result)
    										result = SmallCCompiler::UnaryExpressionNode.new({ 
											:lineno => get_lineno(val[0]), 
											:symbol => get_val(val[0]), 
											:value => get_val(val[1]) 
										}) 
								
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 291)
  def _reduce_62(val, _values, result)
    										result = SmallCCompiler::UnaryExpressionNode.new({ 
											:lineno => get_lineno(val[0]), 
											:symbol => get_val(val[0]),
											:value => get_val(val[1]) 
										}) 
								
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 298)
  def _reduce_63(val, _values, result)
     result = get_val(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 300)
  def _reduce_64(val, _values, result)
    											result = SmallCCompiler::ArrayNode.new({ 
												:lineno => get_lineno(val[1]), 
												:id => get_val(val[0]), 
												:index => get_val(val[2]) 
											}) 
									
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 307)
  def _reduce_65(val, _values, result)
    											result = SmallCCompiler::CallFunctionNode.new({ 
												:lineno => get_lineno(val[0]), 
												:id => SmallCCompiler::IdentifierNode.new(val[0]), 
												:args => get_val(val[2]) 
											}) 
									
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 314)
  def _reduce_66(val, _values, result)
     result = SmallCCompiler::IdentifierNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 315)
  def _reduce_67(val, _values, result)
     result = SmallCCompiler::ConstantNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 316)
  def _reduce_68(val, _values, result)
     result = get_val(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 318)
  def _reduce_69(val, _values, result)
     result = [get_val(val[0])].flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 319)
  def _reduce_70(val, _values, result)
     result = [get_val(val[0]), get_val(val[2])].flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 321)
  def _reduce_71(val, _values, result)
     result = get_val(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 322)
  def _reduce_72(val, _values, result)
     result = SmallCCompiler::BrankNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 324)
  def _reduce_73(val, _values, result)
     result = get_val(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 325)
  def _reduce_74(val, _values, result)
     result = [ SmallCCompiler::BrankNode.new ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 327)
  def _reduce_75(val, _values, result)
     result = get_val(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 328)
  def _reduce_76(val, _values, result)
     result = [ SmallCCompiler::BrankNode.new ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 330)
  def _reduce_77(val, _values, result)
     result = get_val(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 331)
  def _reduce_78(val, _values, result)
     result = [ SmallCCompiler::BrankNode.new ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 333)
  def _reduce_79(val, _values, result)
     result = get_val(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small_c.racc', 334)
  def _reduce_80(val, _values, result)
     result = [ SmallCCompiler::BrankNode.new ] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class MyParser


if __FILE__ == $0
  parser = MyParser.new

  begin
		tree = parser.parse
		program = SmallCCompiler::ProgramNode.new({ :lineno => 1, :declarations => tree })
#   Pry::ColorPrinter.pp program
 		puts program.to_original_code
  rescue Racc::ParseError => e
    $stderr.puts e, e.backtrace
  end
end
